/*
PROBLEM STATEMENT 
Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

*/

ListNode* reverse(ListNode* head, int k, int &counter)
    {
        if(head == nullptr) return nullptr;

        ListNode* prev = nullptr;
        ListNode* next = nullptr;
        ListNode* temp = nullptr;
        int count = 0;
        
        if(counter == 0)
        {
            return head;
        }

        while(head != nullptr && count < k)
        {
            temp = head;
            next = head->next;
            head->next = prev;
            head = next;
            prev = temp;
            count++;
        }
        counter--;
        count = 0;
        while(count < k - 1 && temp->next != nullptr) 
        {
            count++;
            temp = temp->next;
        }    
        // if(temp->next == nullptr) return nullptr;
        temp->next = reverse(head, k, counter);
        return prev;
    }
    
    int lengthOfList(ListNode* head)
    {
        ListNode* temp = head;
        int res = 0;
        while(temp != nullptr)
        {
            temp = temp->next;
            res++;
        }

        return res;
    }

    ListNode* reverseKGroup(ListNode* head, int k) 
    {
        int len = lengthOfList(head);
        int counter = len / k;
        return reverse(head, k, counter);
    }
