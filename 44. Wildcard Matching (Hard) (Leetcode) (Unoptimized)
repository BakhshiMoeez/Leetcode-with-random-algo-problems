

class Solution {
    private boolean helper(String s, int sLen, String p, int pLen, int[][] dp) {
        // Base Case
        if (pLen < 0) {
            return sLen < 0;
        }
        
        if (sLen < 0) {
            for (int i = 0; i <= pLen; i++) {
                if (p.charAt(i) != '*') {
                    return false;
                }
            }
            return true;
        }

        if (dp[sLen][pLen] != -1) {
            return dp[sLen][pLen] == 1;
        }

        boolean result;
        if ((p.charAt(pLen) == s.charAt(sLen)) || (p.charAt(pLen) == '?')) {
            result = helper(s, sLen - 1, p, pLen - 1, dp);
        } else if (p.charAt(pLen) == '*') {
            boolean r1 = helper(s, sLen, p, pLen - 1, dp);
            boolean r2 = helper(s, sLen - 1, p, pLen, dp);
            result = r1 || r2;
        } else {
            result = false;
        }

        // Memoize the result
        dp[sLen][pLen] = result ? 1 : 0;
        return result;
    }

    public boolean isMatch(String s, String p) {
        int[][] dp = new int[s.length()][p.length()];
        
        // Initialize dp with -1
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        return helper(s, s.length() - 1, p, p.length() - 1, dp);
    }
}


// class Solution {
//     private boolean helper(String s, int sLen, String p, int pLen, int[][] dp) {
//         if (pLen < 0) {
//             return sLen < 0;
//         }

//         if (sLen < 0) {
//             for (int i = 0; i <= pLen; i++) {
//                 if (p.charAt(i) != '*') {
//                     return false;
//                 }
//             }
//             return true;
//         }

//         if((p.charAt(pLen) == s.charAt(sLen)) || (p.charAt(pLen) == '?')) {
//             return helper(s, sLen-1, p, pLen-1);
//         }

//         if(p.charAt(pLen) == '*') {
//             boolean r1 = helper(s, sLen, p, pLen-1);
//             boolean r2 = helper(s, sLen-1, p, pLen);

//             return r1 || r2;
//         }

//         return false;
//     }

//     public boolean isMatch(String s, String p) {
//         int [][] dp = new int [s.length()][p.length()];
//         for (int i = 0; i < dp.length; i++) {
//            ArrayUtils.fill(dp[i], -1);
//         }
//         return helper(s, s.length() - 1, p, p.length() - 1, dp);
//     }
// }


// class Solution {
//     private boolean helper(String s, int sIdx, String p, int pIdx) {
//         // Base cases
//         if (pIdx < 0) {
//             return sIdx < 0;
//         }

//         if (sIdx < 0) {
//             // Check if remaining pattern has only '*' characters
//             for (int i = 0; i <= pIdx; i++) {
//                 if (p.charAt(i) != '*') {
//                     return false;
//                 }
//             }
//             return true;
//         }

//         // Matching conditions
//         if (p.charAt(pIdx) == '?' || p.charAt(pIdx) == s.charAt(sIdx)) {
//             return helper(s, sIdx - 1, p, pIdx - 1);
//         } else if (p.charAt(pIdx) == '*') {
//             // Try using '*' to match zero characters in s or one or more characters in s
//             return helper(s, sIdx, p, pIdx - 1) || helper(s, sIdx - 1, p, pIdx);
//         }

//         return false;
//     }

//     public boolean isMatch(String s, String p) {
//         return helper(s, s.length() - 1, p, p.length() - 1);
//     }
// }
