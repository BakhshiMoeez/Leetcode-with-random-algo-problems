/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        helper(root, paths, "");
        return paths;    
    }

    private void helper(TreeNode root, List<String> paths, String path) {
        if(root == null) {
            return;
        }

        if(root.left == null && root.right == null) {
            if(path.isEmpty()) {
                path = path + root.val;
            } else {
                path = path + "->" + root.val;
            }
            
            paths.add(path);
            return;
        }

        if(path.isEmpty()) {
            path = path + root.val;
        } else {
            path = path + "->" + root.val;
        }

        helper(root.left, paths, path);
        helper(root.right, paths, path);
    }
}
