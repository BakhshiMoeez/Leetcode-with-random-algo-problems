int minJumps(int arr[], int n)
    {
        if(n <= 1) return 0;
        if(arr[0] == 0) return -1;
        int maxReach = arr[0];
        int steps = arr[0];
        int jump = 1;
        
        for(int i = 1; i < n; i++)
        {
            if(i == n-1) return jump;
            maxReach = max(maxReach, i + arr[i]);
            steps--;
            if(steps == 0)
            {
                jump++;
                if(i >= maxReach) return -1;
                steps = maxReach-i;
            }
        }
        
        return -1;
        
        //  ===== DYNAMIC PROGRAMMING APPROACH =====
        // vector<int> dp(n, INT_MAX);
        // dp[0] = 0;
        
        // for(int i = 0; i < n - 1; i++)
        // {
        //     if(dp[i] != INT_MAX)
        //     {
        //         for(int j = i + 1, count = 0; count < arr[i] && j < n; j++)
        //         {
        //             count++;
        //             if(dp[i] + 1 < dp[j])
        //             {
        //                 dp[j] = dp[i] + 1;
        //             }
        //         }   
        //     }
        // }
        
        // if(dp[n-1] == INT_MAX) return -1;
        // return dp[n-1];
    }
