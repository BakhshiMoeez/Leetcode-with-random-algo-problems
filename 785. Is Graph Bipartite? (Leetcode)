 bool BFS(vector<vector<int>>& graph, int i, vector<int> &color, vector<bool> &visited)
    {
        queue<int> q;
        q.push(i);
        
        while(!q.empty())
        {
            int temp = q.front();
            q.pop();
            
            if(visited[temp] == false)
            {
                visited[temp] = true;
            }

            for(int i = 0; i < graph[temp].size(); i++)
            {
                if(visited[graph[temp][i]] == true && color[temp] == color[graph[temp][i]]) 
                    return false;

                if(visited[graph[temp][i]] == false)
                {
                    q.push(graph[temp][i]);
                    color[graph[temp][i]] = -1 * color[temp];
                }
            }
        }

        return true;
    }

    bool isBipartite(vector<vector<int>>& graph) 
    {
        if(graph.size() == 0) return true;

        vector<int> color(graph.size(), 1);
        vector<bool> visited(graph.size(), false);

        for(int i = 0; i < graph.size(); i++)
        {
            if(visited[i] == false)
            {
                if(BFS(graph, i, color, visited) == false)
                {
                    return false;
                }
            }
        }

        return true;
    }
