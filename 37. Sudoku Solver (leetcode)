    bool isSafe(int row, int col, char digit, vector<vector<char>>& board)
    {
        for(int k = 0; k < 9; k++)
        {
            if(board[row][k] == digit || board[k][col] == digit ||
             board[3*(row/3) + k/3][3*(col/3) + k%3] == digit)
            {
                return false;
            } 
        }

        return true;
    }

    bool solvingSudoku(vector<vector<char>>& board, vector<char> digits)
    {
        for(int i = 0; i < 9; i++)
        {
            for(int j = 0; j < 9; j++)
            {
                if(board[i][j] == '.')
                {
                    for(int k = 0; k < 9; k++)
                    {
                        if(isSafe(i, j, digits[k], board))
                        {
                            board[i][j] = digits[k];
                            bool ifPossibleToProceed = solvingSudoku(board, digits);
                            if(ifPossibleToProceed)
                            {
                                return true;
                            }
                            else
                            {
                                board[i][j] = '.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) 
    {  
        vector<char> digits = {'1', '2', '3', '4', '5', '6', '7', '8', '9'};
        solvingSudoku(board, digits);
    }
