// Big O(n) time complexity and O(1) space complexity

ListNode* findingMid(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head->next;

        while(fast != nullptr && fast->next != nullptr)
        {
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;
    }

    ListNode* reverse(ListNode* head)
    {
        ListNode * prev = nullptr;
        ListNode * next = head;
        ListNode * temp = head;

        while(next != nullptr)
        {
            temp = head;
            next = next->next;
            head->next = prev;
            prev = temp;
            head = next;
        }

        return prev;
    }

    bool isPalindrome(ListNode* head) 
    {
        if(head == nullptr || head->next == nullptr) true;

        bool flag = true;
        ListNode * mid = findingMid(head);
        mid->next = reverse(mid->next);
        while(mid->next != nullptr)
        {
            if(head->val != mid->next->val)
            {
                flag = false;
                break;
            }

            head = head->next;
            mid = mid->next;
        }

        return flag;
    }
