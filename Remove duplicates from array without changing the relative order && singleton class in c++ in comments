#include <iostream>
#include <unordered_set>

using namespace std;

void removeDuplicates(int arr[], int n)
{
    unordered_set<int> set;
    int j = 0;
    for (int i = 0; i < n; i++)
    {
        if (set.find(arr[i]) == set.end())
        {
            arr[j] = arr[i];
            set.insert(arr[i]);
            j++;
        }
    }

    n = j;

    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

int main()
{
    int arr[] = {6, 2, 2, 1, 1, 2, 3, 2, 4, 5, 4};
    int n = sizeof(arr) / sizeof(arr[0]);
    removeDuplicates(arr, n);
    return 0;
}

// #include <iostream>

// class Singleton
// {
// private:
//     static Singleton *instance;
//     Singleton() {}
//     Singleton(const Singleton &);
//     Singleton &operator=(const Singleton &);

// public:
//     static Singleton *getInstance()
//     {
//         if (!instance)
//             instance = new Singleton();
//         return instance;
//     }

//     void printMessage()
//     {
//         std::cout << "Singleton class example" << std::endl;
//     }
// };

// Singleton *Singleton::instance = nullptr;

// int main()
// {
//     Singleton *singleton = Singleton::getInstance();
//     singleton->printMessage();
//     return 0;
// }
